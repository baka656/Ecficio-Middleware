{"version":3,"sources":["webpack:///src/app/offline-registration/offline-registration.page.html","webpack:///src/app/offline-registration/offline-registration-routing.module.ts","webpack:///src/app/offline-registration/offline-registration.module.ts","webpack:///src/app/offline-registration/offline-registration.page.scss","webpack:///src/app/offline-registration/offline-registration.page.ts"],"names":["routes","path","component","OfflineRegistrationPageRoutingModule","imports","forChild","exports","OfflineRegistrationPageModule","declarations","OfflineRegistrationPage","us","alrt","fb","router","lc","toastCtrl","bo","submitted","userDetails","dbUsers","getString","then","res","undefined","getUsers","subscribe","data","console","log","registrationForm","group","email","compose","required","pattern","name","rollno","college","phone","minLength","maxLength","pass","create","message","loading","present","setTimeout","getPass","value","setString","alert","dismiss","removeItem","invalid","validEmail","timestamp","Date","addUser","baka","navigate","controls","selector","template"],"mappings":"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","file":"offline-registration-offline-registration-module-es5.js","sourcesContent":["export default \"<ion-header [translucent]=\\\"true\\\">\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>Offline Registration</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-item *ngIf=\\\"!bo\\\" onic cordo>\\n    <ion-label position=\\\"floating\\\" >Security code</ion-label>\\n    <ion-input type=\\\"password\\\" #pass></ion-input>\\n    <ion-button (click)=\\\"authenticate(pass)\\\"> Authenticate </ion-button>\\n  </ion-item>\\n\\n  <form *ngIf=\\\"bo\\\" [formGroup]=\\\"registrationForm\\\" (ngSubmit)=\\\"createCode()\\\">\\n    <ion-list>\\n      <ion-item>\\n        <ion-label position=\\\"stacked\\\">Name</ion-label>\\n        <ion-input formControlName=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.name.errors }\\\"></ion-input>\\n        <ion-item *ngIf=\\\"submitted && f.name.errors\\\" class=\\\"invalid-feedback\\\">\\n          <p *ngIf=\\\"f.name.errors.required\\\">Name is required</p>\\n        </ion-item>\\n      </ion-item>\\n      <ion-item >\\n        <ion-label position=\\\"stacked\\\">College</ion-label>\\n        <ion-input type=\\\"text\\\" formControlName=\\\"college\\\" class=\\\"form-control\\\" type=\\\"text\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.college.errors }\\\"></ion-input>\\n        <ion-item *ngIf=\\\"submitted && f.college.errors\\\" class=\\\"invalid-feedback\\\">\\n          <p *ngIf=\\\"f.college.errors.required\\\">College is required</p>\\n        </ion-item>\\n      </ion-item> \\n      <ion-item >\\n        <ion-label position=\\\"stacked\\\">Phone</ion-label>\\n        <ion-input formControlName=\\\"phone\\\" type=\\\"number\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.phone.errors }\\\"></ion-input>\\n        <ion-item *ngIf=\\\"submitted && f.phone.errors\\\" class=\\\"invalid-feedback\\\">\\n          <p *ngIf=\\\"f.phone.errors.required\\\">Phone is required</p>\\n          <p *ngIf=\\\"f.phone.errors.minLength\\\">phone number should have 10digits</p>\\n          <p *ngIf=\\\"f.phone.errors.maxLength\\\">phone number should have 10digits</p>\\n        </ion-item>\\n      </ion-item> \\n      <ion-item >\\n        <ion-label position=\\\"stacked\\\">Roll no</ion-label>\\n        <ion-input formControlName=\\\"rollno\\\" type=\\\"text\\\" class=\\\"form-control\\\"  [ngClass]=\\\"{ 'is-invalid': submitted && f.rollno.errors }\\\"></ion-input>\\n        <ion-item *ngIf=\\\"submitted && f.rollno.errors\\\" class=\\\"invalid-feedback\\\">\\n          <p *ngIf=\\\"f.rollno.errors.required\\\">Roll No is required</p>\\n        </ion-item>       \\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"stacked\\\">Email</ion-label>\\n        <ion-input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"  [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\"></ion-input>\\n        <ion-item *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n            <p *ngIf=\\\"f.email.errors.required\\\">Email Id is required</p>\\n            <p *ngIf=\\\"f.email.errors.pattern\\\">Please provide a valid email-id</p>\\n        </ion-item>\\n      </ion-item>     \\n      <ion-item>\\n        <button type=submit size=\\\"small\\\" class=\\\"btn btn-primary waves-effect waves-dark\\\">Register<ion-icon slot=\\\"end\\\" name=\\\"create\\\"></ion-icon></button>\\n        <button size=\\\"small\\\" class=\\\"btn btn-primary waves-effect waves-dark\\\" (click)=\\\"logout()\\\">Logout</button>\\n      </ion-item>\\n    </ion-list>   \\n  </form>\\n\\n  <ion-list inset=\\\"true\\\" *ngIf=\\\"bo\\\">\\n    <ion-text> <h4> Registered Users : {{ dbUsers.length }} </h4> </ion-text>\\n    <ion-item *ngFor=\\\"let i of dbUsers\\\" >\\n      <ion-avatar slot=\\\"start\\\" style=\\\"width: 20%;\\\">\\n        <p>{{ i.receipt }}<p>\\n      </ion-avatar>\\n      <ion-label style=\\\"font-size: medium;\\\">\\n        <ion-row>\\n          <p>name : {{ i.name }}</p>\\n        </ion-row>\\n        <ion-row >\\n          <p>mobile-no : {{ i.phone }} </p>\\n        </ion-row>\\n        <ion-row>\\n          <p>email : {{ i.email }}</p> \\n        </ion-row>\\n      </ion-label>\\n    </ion-item>\\n  </ion-list>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { OfflineRegistrationPage } from './offline-registration.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OfflineRegistrationPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OfflineRegistrationPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { OfflineRegistrationPageRoutingModule } from './offline-registration-routing.module';\n\nimport { OfflineRegistrationPage } from './offline-registration.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    OfflineRegistrationPageRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [OfflineRegistrationPage]\n})\nexport class OfflineRegistrationPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL29mZmxpbmUtcmVnaXN0cmF0aW9uL29mZmxpbmUtcmVnaXN0cmF0aW9uLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { IttopService } from '../ittop.service';\nimport { AlertController } from '@ionic/angular';\nimport { Router } from '@angular/router';\nimport { User } from 'models/user';\nimport { LoadingController, ToastController } from '@ionic/angular';\n\n@Component({\n  selector: 'app-offline-registration',\n  templateUrl: './offline-registration.page.html',\n  styleUrls: ['./offline-registration.page.scss'],\n})\nexport class OfflineRegistrationPage implements OnInit {\n\n  bo:boolean=false;\n  registrationForm:FormGroup;\n  submitted = false;\n  userDetails:User={} as User;\n  dbUsers:User[]=[];\n  constructor(private us:IttopService,private alrt:AlertController,private fb:FormBuilder,private router:Router,\n    private lc:LoadingController,private toastCtrl:ToastController) { }\n\n  ngOnInit() {\n    this.us.getString('regSession').then((res)=>{\n      if(res==undefined){\n        this.bo=false;\n      }\n      else if(res['value']=='true'){\n        this.bo=true;\n      }\n    });\n    this.us.getUsers().subscribe(data=>{\n      if(data['message']=='success'){\n        this.dbUsers=data['data'];\n      }\n      else\n        console.log(data);\n    });\n    this.registrationForm = this.fb.group({\n      email:    ['', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])],\n      name: ['',Validators.required],\n      rollno: ['', Validators.required],\n      college: ['', Validators.required],\n      phone: ['', [Validators.required, Validators.minLength(10),Validators.maxLength(10)]],\n    });\n  }\n\n  get f() { \n    return this.registrationForm.controls; \n  }  \n\n  authenticate(pass){\n    this.lc.create({message:\"please wait\"}).then( (loading)=>{\n      loading.present();\n      setTimeout(()=>{\n        this.us.getPass({name:\"registrationpass\"}).subscribe(data=>{\n          if(data['message']=='success'){\n            console.log(data,pass.value);\n            if(data['data']==pass.value){\n              this.bo=true;\n              this.us.setString('regSession','true');\n            }\n            else{\n              alert('Invalid credentials / Check your Internet connection');\n            }\n          }\n          else{\n            alert(\"some error occured. Please try again\");\n          }\n        });\n      loading.dismiss();\n      },1000);\n    });\n  }\n\n  logout(){\n    this.bo=false;\n    this.us.removeItem('regSession');\n  }\n  createCode(){\n    this.submitted = true;\n    if (this.registrationForm.invalid) {\n        return;\n    }\n    this.us.validEmail({email:this.registrationForm.value.email}).subscribe(data=>{\n      console.log(data);\n      if(data==true){\n        this.userDetails.name=this.registrationForm.value.name;\n        this.userDetails.email=this.registrationForm.value.email;\n        this.userDetails.phone=this.registrationForm.value.phone;\n        this.userDetails.college=this.registrationForm.value.college;\n        this.userDetails.rollno=this.registrationForm.value.rollno;\n        this.userDetails.timestamp=new Date();\n        console.log(this.userDetails);\n        this.us.addUser(this.userDetails).subscribe((baka)=>{\n          if(baka['message']=='already exists'){\n            alert(\"email already registered\");\n          }\n          else if(baka['message']=='success'){\n            alert(\"receipt:\"+baka['receipt']);\n            this.router.navigate(['online-registration/',baka['receipt']]);\n          }\n          else{\n            alert(\"some error occured.please try again\");\n          }\n        });\n      }\n      else{\n        alert('enter valid email address');\n      }\n    });\n  }  \n}\n"]}